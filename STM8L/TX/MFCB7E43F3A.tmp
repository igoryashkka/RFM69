/**
  ******************************************************************************
  * @file    Project/STM8L15x_StdPeriph_Template/main.c
  * @author  MCD Application Team
  * @version V1.6.1
  * @date    30-September-2014
  * @brief   Main program body
  ******************************************************************************
  * @attention
  *
  * <h2><center>&copy; COPYRIGHT 2014 STMicroelectronics</center></h2>
  *
  * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
  * You may not use this file except in compliance with the License.
  * You may obtain a copy of the License at:
  *
  *        http://www.st.com/software_license_agreement_liberty_v2
  *
  * Unless required by applicable law or agreed to in writing, software 
  * distributed under the License is distributed on an "AS IS" BASIS, 
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *
  ******************************************************************************
  */

/* Includes ------------------------------------------------------------------*/
#include "stm8l15x.h"

/** @addtogroup STM8L15x_StdPeriph_Template
  * @{
  */

/* Private typedef -----------------------------------------------------------*/
/* Private define ------------------------------------------------------------*/
/* Private macro -------------------------------------------------------------*/
/* Private variables ---------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
//#define LED_GPIO_PORT  (GPIOC)
//#define LED_GPIO_PIN GPIO_PIN_0
/* Private functions ---------------------------------------------------------*/
uint8_t TxBuffer1[] = "UART1 Example: UART1 -> SPI using TXE and RXNE Flags";
uint8_t TxBuffer2[] = "UART1 Example: SPI -> UART1 using TXE and RXNE Flags";
uint8_t RxBuffer1[TxBufferSize2] = {0};
uint8_t RxBuffer2[TxBufferSize1] = {0};

uint8_t NbrOfDataToRead = TxBufferSize1;
__IO uint8_t TxCounter = 0, RxCounter = 0;
volatile TestStatus TransferStatus1 = FAILED, TransferStatus2 = FAILED;

TestStatus Buffercmp(uint8_t* pBuffer1, uint8_t* pBuffer2, uint16_t BufferLength);

void Delay(uint16_t nCount)
{
  /* Decrement nCount value */
  while (nCount != 0)
  {
    nCount--;
  }
}


//-------------------------------------------------
// SPI initialization
 uint8_t txData[] = "Hello, RFM69!";
    uint8_t rxBuffer[64];
    uint8_t rxLength;

 void RFM69_Transmit(uint8_t *data, uint8_t length) {
    //RFM69_SetMode(MODE_STDBY);

    // Write data to FIFO
    //GPIO_ResetBits(RFM69_CS_PORT, RFM69_CS_PIN);
    //SPI_Transfer(REG_FIFO | 0x80);
    for (uint8_t i = 0; i < length; i++) {
        SPI_Transfer(data[i]);
    }
    //GPIO_SetBits(RFM69_CS_PORT, RFM69_CS_PIN);

    // Switch to TX mode
    //RFM69_SetMode(MODE_TX);

    // Wait for packet sent
    //while ((RFM69_ReadReg(REG_IRQ_FLAGS2) & 0x08) == 0);

    //RFM69_SetMode(MODE_STDBY);
} 
    

void SPI_Init_Config(void) {
    SPI_InitTypeDef SPI_InitStructure;
    GPIO_InitTypeDef GPIO_InitStructure;
    CLK_HSICmd(ENABLE);
    // Enable SPI and GPIO clocks
    CLK_PeripheralClockConfig(CLK_Peripheral_SPI1,ENABLE);
    // Configure SPI SCK, MISO, and MOSI pins
    

  
     SPI_Init(SPI_FirstBit_MSB, SPI_BaudRatePrescaler_8, SPI_Mode_Master, SPI_CPOL_Low,
           SPI_CPHA_1Edge, SPI_Direction_Tx, SPI_NSS_Soft,(uint8_t)0x07);
     
    // Configure CS and RESET pins
    //GPIO_InitStructure.GPIO_Pin = RFM69_CS_PIN | RFM69_RESET_PIN;
    //GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
    //GPIO_Init(GPIOA, &GPIO_InitStructure);



    // Enable SPI
    SPI_Cmd(SPI1, ENABLE);
}

uint8_t SPI_Transfer(uint8_t data) {
    while (SPI_GetFlagStatus(SPI1, SPI_FLAG_TXE) == RESET);
    SPI_SendData(SPI1, data);
    //while (SPI_GetFlagStatus(SPI1, SPI_FLAG_RXNE) == RESET);
    return SPI_ReceiveData(SPI1);
}
//-------------------------------------------------

/**
  * @brief  Main program.
  * @param  None
  * @retval None
  */
void main(void)
{
  /* Infinite loop */
   GPIO_Init(GPIOC, GPIO_Pin_6, GPIO_Mode_Out_PP_Low_Fast);
   
   SPI_Init_Config();
   
  while (1)
  {
    GPIO_ToggleBits(GPIOC, (GPIO_Pin_TypeDef)GPIO_Pin_6);
    Delay(0xFFFF);
    RFM69_Transmit(txData, sizeof(txData) - 1);
  }
}

#ifdef  USE_FULL_ASSERT

/**
  * @brief  Reports the name of the source file and the source line number
  *   where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t* file, uint32_t line)
{ 
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
 
  /* Infinite loop */
  while (1)
  {
    
  }
}
#endif

/**
  * @}
  */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
